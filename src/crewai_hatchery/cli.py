#!/usr/bin/env python
"""
CrewAI Hatchery CLI

Command-line interface for running CrewAI Hatchery flows and tools.
"""

import asyncio

import typer
from typing import Optional
from pathlib import Path
from rich.console import Console
from rich.panel import Panel
from rich.text import Text

from .flows import create_default_flow
from .utils import create_output_dir

app = typer.Typer(
    name="hatchery",
    help="CrewAI Hatchery - "
    "Intelligent agent ecosystem for "
    "autonomous tool generation and "
    "dynamic crew orchestration",
    rich_markup_mode="rich",
)

console = Console()
flows = {
    "default": create_default_flow,
}


@app.command()
def run_flow(
    flow_type: str = typer.Argument("default", help="Type of flow to run"),
    query: Optional[str] = typer.Option(
        None,
        "--query",
        "-q",
        help="User query to process (if not provided, will prompt interactively)",
    ),
    config: Optional[Path] = typer.Option(
        None, "--config", "-c", help="Configuration file path"
    ),
    dry_run: bool = typer.Option(
        False, "--dry-run", help="Show what would be done without executing"
    ),
    verbose: bool = typer.Option(
        False, "--verbose", "-v", help="Enable verbose output"
    ),
):
    """
    Run a CrewAI Hatchery flow
    """
    console.print(
        Panel.fit(
            Text("CrewAI Hatchery", style="bold blue"),
            subtitle="Intelligent Agent Ecosystem",
        )
    )

    if dry_run:
        console.print(f"[yellow]DRY RUN:[/yellow] Would run {flow_type} flow")
        if query:
            console.print(f"[yellow]Query:[/yellow] {query}")
        if config:
            console.print(f"[yellow]Config:[/yellow] {config}")
        return

    flow_creator = flows.get(flow_type)
    if not flow_creator:
        console.print(f"[red]❌ Unknown flow type: {flow_type}[/red]")
        console.print("Available flows: default")
        raise typer.Exit(1)

    flow = flow_creator(user_query=query)
    output_dir = create_output_dir()

    with output_dir.subdir("flows"):
        try:
            flow.kickoff()
            console.print("[green]✅ Flow completed successfully![/green]")
        except Exception as e:
            console.print(f"[red]❌ Error running flow: {e}[/red]")
            raise typer.Exit(1)


@app.command()
def plot(
    flow_type: str = typer.Argument("default", help="Type of flow to visualize"),
    output: Optional[Path] = typer.Option(
        None, "--output", "-o", help="Output file path"
    ),
):
    """
    Generate a visualization of a flow
    """
    console.print("[blue]Generating flow visualization...[/blue]")

    flow_creator = flows.get(flow_type)
    if not flow_creator:
        console.print(f"[red]❌ Unknown flow type: {flow_type}[/red]")
        console.print("Available flows: default")
        raise typer.Exit(1)

    flow = flow_creator()
    output_dir = create_output_dir(str(output) if output else None)

    with output_dir.subdir("flows") as d:
        try:
            flow.plot(flow_type)
            console.print(f"[green]✅ Visualization saved to {d}[/green]")
        except Exception as e:
            console.print(f"[red]❌ Error generating visualization: {e}[/red]")
            raise typer.Exit(1)


@app.command()
def clean():
    """
    Clean up temporary files generated by CrewAI Hatchery
    """
    console.print("[yellow]Cleaning up temporary files...[/yellow]")

    try:
        # Clean temp directories
        output_dir = create_output_dir()
        output_dir.cleanup(ignore_errors=False)
        console.print("[green]✅ Cleanup completed[/green]")

    except Exception as e:
        console.print(f"[red]❌ Error during cleanup: {e}[/red]")
        raise typer.Exit(1)


@app.command()
def info():
    """
    Show information about CrewAI Hatchery
    """
    info_text = """
    [bold blue]CrewAI Hatchery[/bold blue]

    An intelligent agent ecosystem for autonomous tool generation,
    decision optimization, and dynamic crew orchestration.

    [bold]Features:[/bold]
    • Intelligent task assessment with consultant agents
    • Dynamic crew assembly based on task complexity
    • Autonomous tool generation and optimization
    • Event-driven workflow orchestration

    [bold]Available Flows:[/bold]
    • default - Intelligent task complexity assessment and execution

    [bold]Usage Examples:[/bold]
    hatchery run-flow default                                         # Interactive mode
    hatchery run-flow default --query "What is machine learning?"     # Programmatic mode
    hatchery plot default
    hatchery clean                                                    # Clean temporary files
    hatchery info
    """

    console.print(Panel(info_text, title="CrewAI Hatchery", border_style="blue"))


def main():
    """
    Main entry point for the CLI
    """
    asyncio.run(app())


if __name__ == "__main__":
    main()
