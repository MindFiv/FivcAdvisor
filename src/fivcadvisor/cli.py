#!/usr/bin/env python
"""
FivcAdvisor CLI

Command-line interface for running FivcAdvisor flows and tools.
"""

import typer
from typing import Optional
from pathlib import Path

from dotenv import load_dotenv
from rich.console import Console
from rich.panel import Panel
from rich.text import Text

from fivcadvisor import flows, tools, logs
from fivcadvisor.utils import create_output_dir

load_dotenv()

app = typer.Typer(
    name="FivcAdvisor",
    help="FivcAdvisor - "
    "Intelligent agent ecosystem for "
    "autonomous tool generation and "
    "dynamic crew orchestration",
    rich_markup_mode="rich",
)

console = Console()


@app.command()
def run(
    flow_type: str = typer.Argument("general", help="Type of flow to run"),
    query: Optional[str] = typer.Option(
        None,
        "--query",
        "-q",
        help="User query to process (if not provided, will prompt interactively)",
    ),
    output: Optional[Path] = typer.Option(
        None, "--output", "-o", help="Output file path"
    ),
    dry_run: bool = typer.Option(
        False, "--dry-run", help="Show what would be done without executing"
    ),
    verbose: bool = typer.Option(
        False, "--verbose", "-v", help="Enable verbose output"
    ),
):
    """
    Run a FivcAdvisor flow
    """
    console.print(
        Panel.fit(
            Text("FivcAdvisor Flow Runner", style="bold blue"),
            subtitle="Intelligent Agent Ecosystem",
        )
    )

    if query is None:
        query = typer.prompt("Enter your query")
        if not query:
            console.print("[red]❌ Query cannot be empty[/red]")
            raise typer.Exit(1)

    logs.register_default_events(logger=logs.agent_logger)  # build logs

    flow_creator = flows.default_retriever.get(flow_type)
    if not flow_creator:
        console.print(f"[red]❌ Unknown flow type: {flow_type}[/red]")
        console.print("Available flows: general, simple, complex")
        raise typer.Exit(1)

    if dry_run:
        console.print(f"[yellow]DRY RUN:[/yellow] Would run {flow_type} flow")
        if query:
            console.print(f"[yellow]Query:[/yellow] {query}")
        if output:
            console.print(f"[yellow]Output:[/yellow] {output}")
        return

    flow = flow_creator(
        tools_retriever=tools.default_retriever,
        verbose=verbose,
    )

    with create_output_dir(base=output):
        try:
            flow.kickoff(inputs={"user_query": query})
            console.print("[green]✅ Flow completed successfully![/green]")
        except Exception as e:
            console.print(f"[red]❌ Error running flow: {e}[/red]")
            raise typer.Exit(1)


@app.command()
def plot(
    flow_type: str = typer.Argument("general", help="Type of flow to visualize"),
    output: Optional[Path] = typer.Option(
        None, "--output", "-o", help="Output file path"
    ),
    verbose: bool = typer.Option(
        False, "--verbose", "-v", help="Enable verbose output"
    ),
):
    """
    Generate a visualization of a flow
    """

    console.print("[blue]Generating flow visualization...[/blue]")

    logs.register_default_events(logger=logs.agent_logger)  # build logs

    flow_creator = flows.default_retriever.get(flow_type)
    if not flow_creator:
        console.print(f"[red]❌ Unknown flow type: {flow_type}[/red]")
        console.print("Available flows: general, simple, complex")
        raise typer.Exit(1)

    flow = flow_creator(
        tools_retriever=tools.default_retriever,
        verbose=verbose,
    )

    with create_output_dir(base=output) as d:
        try:
            flow.plot(flow_type)
            console.print(f"[green]✅ Visualization saved to {d}[/green]")
        except Exception as e:
            console.print(f"[red]❌ Error generating visualization: {e}[/red]")
            raise typer.Exit(1)


@app.command()
def clean():
    """
    Clean up temporary files generated by FivcAdvisor
    """
    console.print("[yellow]Cleaning up temporary files...[/yellow]")

    try:
        # Clean temp directories
        output_dir = create_output_dir()
        output_dir.cleanup(ignore_errors=False)
        console.print("[green]✅ Cleanup completed[/green]")

    except Exception as e:
        console.print(f"[red]❌ Error during cleanup: {e}[/red]")
        raise typer.Exit(1)


@app.command()
def serve(
    host: str = typer.Option(
        "0.0.0.0", "--host", "-h", help="Host to bind the server to"
    ),
    port: int = typer.Option(8000, "--port", "-p", help="Port to bind the server to"),
    reload: bool = typer.Option(
        False, "--reload", help="Enable auto-reload for development"
    ),
    log_level: str = typer.Option(
        "info", "--log-level", help="Log level (debug, info, warning, error)"
    ),
):
    """
    Start the FivcAdvisor API server
    """
    console.print(
        Panel.fit(
            Text("FivcAdvisor API Server", style="bold green"),
            subtitle="REST API for Flow Execution",
        )
    )

    console.print(f"[blue]Starting server on {host}:{port}[/blue]")
    console.print(f"[blue]API Documentation: http://{host}:{port}/docs[/blue]")
    console.print(f"[blue]Health Check: http://{host}:{port}/api/v1/health[/blue]")

    try:
        from .servers import run_server_app, app

        run_server_app(app, host=host, port=port, reload=reload, log_level=log_level)

    except ImportError as e:
        console.print(f"[red]❌ Error importing server: {e}[/red]")
        console.print("[yellow]Make sure FastAPI and uvicorn are installed:[/yellow]")
        console.print("[yellow]pip install fastapi uvicorn[standard][/yellow]")
        raise typer.Exit(1)
    except Exception as e:
        console.print(f"[red]❌ Error starting server: {e}[/red]")
        raise typer.Exit(1)


@app.command()
def info():
    """
    Show information about FivcAdvisor
    """
    info_text = """
    [bold blue]FivcAdvisor[/bold blue]

    An intelligent agent ecosystem for autonomous tool generation,
    decision optimization, and dynamic crew orchestration.

    [bold]Features:[/bold]
    • Intelligent task assessment with consultant agents
    • Dynamic crew assembly based on task complexity
    • Autonomous tool generation and optimization
    • Event-driven workflow orchestration

    [bold]Available Flows:[/bold]
    • default - Intelligent task complexity assessment and execution

    [bold]Usage Examples:[/bold]
    fivcadvisor run general                                         # Interactive mode
    fivcadvisor run general --query "What is machine learning?"     # Programmatic mode
    fivcadvisor serve                                               # Start API server
    fivcadvisor serve --port 8080 --reload                          # Development server
    fivcadvisor plot general
    fivcadvisor clean                                               # Clean temporary files
    fivcadvisor info
    """

    console.print(Panel(info_text, title="FivcAdvisor", border_style="blue"))


def main():
    """
    Main entry point for the CLI
    """
    app()


if __name__ == "__main__":
    main()
