# Architecture & Patterns

## Graphs
- Use LangGraph for state management and workflow orchestration
- State held in TypedDict models (e.g., `GraphState`)
- Assess → route → execute pattern in `graphs/` modules

## Agents / Tasks / Tools
- Agent factories in `agents.py`
- Task factories in `tasks.py`
- Tools re-exported from `crewai_tools` via `tools/__init__.py`

## File Placement Rules
- New graphs: `src/fivcadvisor/graphs/<name>.py` and export in `graphs/__init__.py`
- Agent factories: `src/fivcadvisor/agents.py`
- Task factories: `src/fivcadvisor/tasks.py`
- LLM config/variants: `src/fivcadvisor/llms.py`
- Utilities and shared models: `src/fivcadvisor/utils/`
- CLI commands: `src/fivcadvisor/cli.py`
- Tests mirror source; mock external calls
