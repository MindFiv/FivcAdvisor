{
  "id": "snapshot_1760066726755_qqgfm7nc4",
  "approvalId": "approval_1760066726753_03nc9plux",
  "approvalTitle": "Structure Steering Document - FivcAdvisor Codebase Organization",
  "version": 1,
  "timestamp": "2025-10-10T03:25:26.755Z",
  "trigger": "initial",
  "status": "pending",
  "content": "# Project Structure\n\n## Directory Organization\n\n```\nFivcAdvisor/\n├── src/fivcadvisor/          # Main source code (src layout)\n│   ├── agents/               # Agent creation and management\n│   │   ├── __init__.py       # Agent factory functions and exports\n│   │   └── types/            # Agent-related types and utilities\n│   │       ├── __init__.py   # Type exports\n│   │       ├── conversations.py  # Conversation management\n│   │       └── retrievers.py     # Agent retrieval and creation decorators\n│   │\n│   ├── app/                  # Streamlit web interface\n│   │   ├── __init__.py       # Main app entry point\n│   │   ├── components/       # Reusable UI components\n│   │   ├── views/            # Page views (chat, settings, tasks)\n│   │   │   ├── chat.py       # Chat interface\n│   │   │   ├── settings.py   # Settings page\n│   │   │   └── tasks.py      # Task management page\n│   │   ├── messages.py       # Message rendering and callbacks\n│   │   ├── sessions.py       # Session management\n│   │   └── tools.py          # Tool callbacks for UI\n│   │\n│   ├── embeddings/           # Vector database and embeddings\n│   │   ├── __init__.py       # Embeddings exports\n│   │   └── types/            # Embedding database types\n│   │       └── db.py         # ChromaDB wrapper\n│   │\n│   ├── settings/             # Configuration management\n│   │   ├── __init__.py       # Settings exports and lazy loading\n│   │   └── types.py          # SettingsConfig class\n│   │\n│   ├── tasks/                # Task execution and orchestration\n│   │   ├── __init__.py       # Task execution functions\n│   │   └── types/            # Task-related types\n│   │       ├── managers.py   # TaskManager for task lifecycle\n│   │       └── tracers.py    # TaskTracer for event tracking\n│   │\n│   ├── tools/                # Tool management and retrieval\n│   │   ├── __init__.py       # Tool registration and exports\n│   │   └── types/            # Tool-related types\n│   │       ├── configs.py    # ToolsConfig for MCP integration\n│   │       └── retrievers.py # ToolsRetriever for semantic search\n│   │\n│   ├── utils/                # Utility functions\n│   │   ├── __init__.py       # Utility exports\n│   │   ├── directories.py    # Directory management\n│   │   └── variables.py      # Lazy loading and variable utilities\n│   │\n│   ├── __init__.py           # Package exports\n│   ├── cli.py                # Typer CLI entry point\n│   ├── models.py             # LLM model factories\n│   └── schemas.py            # Pydantic data schemas\n│\n├── tests/                    # Test suite (mirrors src structure)\n│   ├── test_agent_creator.py\n│   ├── test_conversation_manager.py\n│   ├── test_embeddings.py\n│   ├── test_execution_integration.py\n│   ├── test_schemas.py\n│   ├── test_settings.py\n│   ├── test_task_manager.py\n│   ├── test_task_tracer.py\n│   ├── test_tools_config.py\n│   ├── test_tools_retriever.py\n│   └── test_utils.py\n│\n├── configs/                  # Configuration examples\n│   ├── mcp.yaml.example      # MCP tool configuration template\n│   └── settings.yaml.example # Application settings template\n│\n├── docs/                     # Documentation\n│   ├── README.md             # Documentation index\n│   ├── DESIGN.md             # System design and architecture\n│   ├── DEPENDENCIES.md       # Dependency management guide\n│   └── WEB_INTERFACE.md      # Web interface documentation\n│\n├── examples/                 # Usage examples\n│   ├── agents/               # Agent usage examples\n│   ├── tasks/                # Task execution examples\n│   └── tools/                # Tool usage examples\n│\n├── repl_state/               # REPL state persistence\n│   └── repl_state.pkl        # Pickled REPL state\n│\n├── .env.example              # Environment variables template\n├── .gitignore                # Git ignore patterns\n├── Makefile                  # Common development commands\n├── pyproject.toml            # Project metadata and dependencies\n├── README.md                 # Main project README\n└── uv.lock                   # Dependency lock file\n```\n\n**Organizational Principles:**\n- **Src Layout**: Clean separation between source (`src/`) and package root\n- **Feature-based Modules**: Each top-level module represents a major feature (agents, tools, tasks, etc.)\n- **Types Subdirectories**: Complex modules have `types/` subdirectories for implementation details\n- **Flat Top-level**: Core abstractions (models, schemas, cli) at package root for easy access\n\n## Naming Conventions\n\n### Files\n- **Modules**: `snake_case` (e.g., `conversation_manager.py`, `task_tracer.py`)\n- **Package Markers**: `__init__.py` for all packages and subpackages\n- **Tests**: `test_<module_name>.py` (e.g., `test_agent_creator.py`)\n- **Configuration**: `<name>.yaml` or `<name>.yaml.example`\n- **Documentation**: `UPPERCASE.md` for major docs, `lowercase.md` for guides\n\n### Code\n- **Classes/Types**: `PascalCase` (e.g., `AgentsRetriever`, `TaskManager`, `SettingsConfig`)\n- **Functions/Methods**: `snake_case` (e.g., `create_default_agent`, `run_tooling_task`)\n- **Constants**: `UPPER_SNAKE_CASE` (e.g., `DEFAULT_MODEL`, `MAX_RETRIES`)\n- **Variables**: `snake_case` (e.g., `tools_retriever`, `agent_config`)\n- **Private Members**: Leading underscore `_private_method`, `_internal_var`\n- **Decorators**: `snake_case` (e.g., `@agent_creator`)\n\n### Special Patterns\n- **Factory Functions**: `create_<name>` (e.g., `create_default_agent`, `create_chat_model`)\n- **Lazy Values**: `<name>_config` for lazy-loaded configurations\n- **Retrievers**: `<name>_retriever` for retrieval classes\n- **Managers**: `<Name>Manager` for lifecycle management classes\n\n## Import Patterns\n\n### Import Order (PEP 8 Compliant)\n1. **Standard library imports** (e.g., `os`, `typing`)\n2. **Third-party imports** (e.g., `strands`, `streamlit`, `pydantic`)\n3. **Local application imports** (e.g., `from fivcadvisor import agents`)\n4. **Relative imports** (e.g., `from .types import AgentsRetriever`)\n\n### Module Organization\n```python\n# Example from agents/__init__.py\n__all__ = [\n    \"create_default_agent\",\n    \"create_tooling_agent\",\n    # ... explicit exports\n]\n\n# Standard library\nfrom typing import cast, List, Optional, Callable\n\n# Third-party\nfrom strands.agent import Agent\nfrom strands.multiagent import Swarm\n\n# Local absolute imports\nfrom fivcadvisor import models, tools, schemas, utils\n\n# Relative imports\nfrom fivcadvisor.agents.types import (\n    agent_creator,\n    AgentsRetriever,\n    ToolFilteringConversationManager,\n)\n```\n\n### Import Patterns\n- **Absolute imports preferred**: `from fivcadvisor.agents import create_default_agent`\n- **Relative imports for types**: `from .types import SomeType` within same package\n- **Lazy imports**: Import heavy dependencies inside functions when needed\n- **Explicit exports**: Use `__all__` to define public API in `__init__.py`\n\n## Code Structure Patterns\n\n### Module/File Organization\n```python\n# Standard pattern for module files:\n\n# 1. Module docstring (if applicable)\n\"\"\"\nModule description and purpose.\n\"\"\"\n\n# 2. Exports declaration\n__all__ = [\"PublicClass\", \"public_function\"]\n\n# 3. Imports (ordered as above)\nimport os\nfrom typing import Optional\n\nfrom third_party import SomeClass\n\nfrom fivcadvisor import utils\nfrom .types import InternalType\n\n# 4. Constants and configuration\nDEFAULT_TIMEOUT = 30\nMAX_RETRIES = 3\n\n# 5. Type definitions (if needed)\nConfigDict = dict[str, Any]\n\n# 6. Main implementation (classes, functions)\nclass PublicClass:\n    \"\"\"Public class with docstring.\"\"\"\n    pass\n\ndef public_function():\n    \"\"\"Public function with docstring.\"\"\"\n    pass\n\n# 7. Private/helper functions\ndef _private_helper():\n    \"\"\"Internal helper function.\"\"\"\n    pass\n```\n\n### Class Organization\n```python\nclass ExampleClass:\n    \"\"\"Class docstring explaining purpose.\"\"\"\n    \n    # 1. Class variables\n    class_var: ClassVar[str] = \"value\"\n    \n    # 2. __init__ and initialization\n    def __init__(self, param: str):\n        self.param = param\n        self._private_state = None\n    \n    # 3. Public methods (alphabetically or by importance)\n    def public_method(self) -> str:\n        \"\"\"Public method with docstring.\"\"\"\n        return self._private_method()\n    \n    # 4. Properties\n    @property\n    def computed_value(self) -> int:\n        \"\"\"Property with docstring.\"\"\"\n        return len(self.param)\n    \n    # 5. Private methods\n    def _private_method(self) -> str:\n        \"\"\"Internal implementation.\"\"\"\n        return self.param.upper()\n    \n    # 6. Special methods (if not __init__)\n    def __repr__(self) -> str:\n        return f\"ExampleClass(param={self.param!r})\"\n```\n\n### Function Organization\n```python\ndef example_function(\n    required_param: str,\n    optional_param: Optional[int] = None,\n    **kwargs: Any,\n) -> Result:\n    \"\"\"\n    Function docstring with description.\n    \n    Args:\n        required_param: Description of required parameter\n        optional_param: Description of optional parameter\n        **kwargs: Additional keyword arguments\n    \n    Returns:\n        Description of return value\n    \n    Raises:\n        ValueError: When validation fails\n    \"\"\"\n    # 1. Input validation\n    if not required_param:\n        raise ValueError(\"required_param cannot be empty\")\n    \n    # 2. Setup and initialization\n    config = _load_config()\n    \n    # 3. Core logic\n    result = _process_data(required_param, config)\n    \n    # 4. Post-processing\n    result = _validate_result(result)\n    \n    # 5. Return\n    return result\n```\n\n## Code Organization Principles\n\n1. **Single Responsibility**: Each module/class/function has one clear purpose\n   - `agents/` only handles agent creation and management\n   - `tools/` only handles tool retrieval and configuration\n   - `models.py` only contains model factory functions\n\n2. **Modularity**: Code organized into reusable, independent modules\n   - Each major feature is a separate package\n   - Types subdirectories contain implementation details\n   - Utilities are centralized in `utils/`\n\n3. **Explicit Public API**: Use `__all__` to define what's exported\n   - Every `__init__.py` declares its public interface\n   - Internal implementation in `types/` subdirectories\n   - Clear separation between public and private\n\n4. **Lazy Loading**: Defer expensive initialization\n   - Settings loaded lazily via `create_lazy_value`\n   - Tools registered on first access\n   - Models created on demand\n\n5. **Decorator-based Factories**: Clean registration pattern\n   - `@agent_creator` decorator for agent factories\n   - Automatic registration in retrievers\n   - Type-safe factory functions\n\n## Module Boundaries\n\n### Core vs Extensions\n- **Core**: `agents/`, `tools/`, `models.py`, `schemas.py`, `settings/`\n  - Stable, well-tested, minimal dependencies\n  - Changes require careful consideration\n  \n- **Extensions**: `app/`, `tasks/`, `embeddings/`\n  - Can evolve independently\n  - Optional features that depend on core\n\n### Public API vs Internal\n- **Public API**: Exported via `__all__` in `__init__.py`\n  - Stable interface for users\n  - Documented and tested\n  - Example: `create_default_agent()`, `ToolsRetriever`\n\n- **Internal**: `types/` subdirectories and `_private` functions\n  - Implementation details\n  - Can change without notice\n  - Example: `_load_config()`, internal classes\n\n### Dependency Direction\n```\n┌─────────────────────────────────────────┐\n│              CLI / App                   │  ← User-facing interfaces\n└──────────────┬──────────────────────────┘\n               │\n┌──────────────▼──────────────────────────┐\n│     Agents / Tasks / Tools              │  ← High-level orchestration\n└──────────────┬──────────────────────────┘\n               │\n┌──────────────▼──────────────────────────┐\n│     Models / Schemas / Settings         │  ← Core abstractions\n└──────────────┬──────────────────────────┘\n               │\n┌──────────────▼──────────────────────────┐\n│     Utils / Embeddings                  │  ← Low-level utilities\n└─────────────────────────────────────────┘\n```\n\n**Rules:**\n- Higher layers can depend on lower layers\n- Lower layers NEVER depend on higher layers\n- Circular dependencies are forbidden\n- Use dependency injection for flexibility\n\n## Code Size Guidelines\n\n### File Size\n- **Target**: 100-300 lines per file\n- **Maximum**: 500 lines (consider splitting if exceeded)\n- **Exceptions**: `__init__.py` can be larger for exports\n\n### Function/Method Size\n- **Target**: 10-30 lines per function\n- **Maximum**: 50 lines (consider extracting helpers)\n- **Single responsibility**: One function, one purpose\n\n### Class Complexity\n- **Target**: 5-15 methods per class\n- **Maximum**: 20 methods (consider composition)\n- **Cohesion**: All methods should relate to class purpose\n\n### Nesting Depth\n- **Maximum**: 3 levels of nesting\n- **Prefer**: Early returns and guard clauses\n- **Extract**: Complex nested logic into helper functions\n\n## Web Interface Structure\n\n### Streamlit App Organization\n```\nsrc/fivcadvisor/app/\n├── __init__.py           # Main app entry point and routing\n├── components/           # Reusable UI components\n│   └── __init__.py       # Component exports\n├── views/                # Page views (one per page)\n│   ├── __init__.py       # View exports\n│   ├── chat.py           # Chat interface page\n│   ├── settings.py       # Settings page\n│   └── tasks.py          # Task management page\n├── messages.py           # Message rendering and callbacks\n├── sessions.py           # Session state management\n└── tools.py              # Tool execution callbacks\n```\n\n### Separation of Concerns\n- **App isolated from core**: Web UI doesn't affect CLI or library usage\n- **Own entry point**: `fivcadvisor web` command launches Streamlit\n- **Minimal dependencies**: App only imports from core modules\n- **Can be disabled**: Core functionality works without web interface\n\n### View Pattern\nEach view file follows this pattern:\n```python\ndef render():\n    \"\"\"Render the page view.\"\"\"\n    st.title(\"Page Title\")\n    \n    # Get shared session state\n    session = st.session_state.chat_session\n    \n    # Render UI components\n    # Handle user interactions\n    # Update state and rerun if needed\n```\n\n## Documentation Standards\n\n### Docstring Style\n- **Format**: Google-style docstrings\n- **Required for**: All public classes, functions, and methods\n- **Optional for**: Private functions (but encouraged)\n\n### Example Docstring\n```python\ndef create_agent(name: str, tools: List[Tool]) -> Agent:\n    \"\"\"\n    Create a new agent with specified tools.\n    \n    Args:\n        name: Human-readable name for the agent\n        tools: List of tools the agent can use\n    \n    Returns:\n        Configured Agent instance ready for execution\n    \n    Raises:\n        ValueError: If name is empty or tools list is invalid\n    \n    Example:\n        >>> agent = create_agent(\"Assistant\", [calculator, search])\n        >>> result = agent.run(\"What is 2+2?\")\n    \"\"\"\n    pass\n```\n\n### Module Documentation\n- **README.md**: Every major module should have usage examples\n- **Inline comments**: Explain complex logic and non-obvious decisions\n- **Type hints**: All function signatures should have type annotations\n- **Examples**: Provide usage examples in docstrings or examples/\n\n### Documentation Files\n- **docs/DESIGN.md**: System architecture and design decisions\n- **docs/DEPENDENCIES.md**: Dependency management and installation\n- **docs/WEB_INTERFACE.md**: Web interface usage guide\n- **README.md**: Quick start and overview\n\n",
  "fileStats": {
    "size": 16901,
    "lines": 460,
    "lastModified": "2025-10-10T03:25:19.293Z"
  },
  "comments": []
}